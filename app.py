# app.py
import streamlit as st
import asyncio
import os
from openai import AsyncOpenAI

client = AsyncOpenAI(api_key=os.getenv("OPENAI_API_KEY"))

async def macro_agent(news):
    response = await client.chat.completions.create(
        model="gpt-4-turbo",
        messages=[
            {"role": "system", "content": "–¢—ã –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫. –î–µ–ª–∞–π –≤—ã–≤–æ–¥—ã –ø–æ –Ω–æ–≤–æ—Å—Ç—è–º."},
            {"role": "user", "content": news}
        ]
    )
    return response.choices[0].message.content

async def quant_agent(stock_data):
    response = await client.chat.completions.create(
        model="gpt-4-turbo",
        messages=[
            {"role": "system", "content": "–¢—ã –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã."},
            {"role": "user", "content": stock_data}
        ]
    )
    return response.choices[0].message.content

async def fundamental_agent(company_name):
    response = await client.chat.completions.create(
        model="gpt-4-turbo",
        messages=[
            {"role": "system", "content": "–¢—ã —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫. –û—Ü–µ–Ω–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∫–æ–º–ø–∞–Ω–∏–∏."},
            {"role": "user", "content": f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–º–ø–∞–Ω–∏—é {company_name}"}
        ]
    )
    return response.choices[0].message.content

async def portfolio_manager(news, stock_data, company_name):
    macro_task = asyncio.create_task(macro_agent(news))
    quant_task = asyncio.create_task(quant_agent(stock_data))
    fundamental_task = asyncio.create_task(fundamental_agent(company_name))

    macro_result, quant_result, fundamental_result = await asyncio.gather(
        macro_task, quant_task, fundamental_task
    )

    summary_prompt = f"""
    –ú–∞–∫—Ä–æ: {macro_result}
    –ö–≤–∞–Ω—Ç: {quant_result}
    –§—É–Ω–¥–∞–º–µ–Ω—Ç: {fundamental_result}

    –ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö, —Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–∫—É–ø–∞—Ç—å –∞–∫—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏ {company_name}?
    """

    final_response = await client.chat.completions.create(
        model="gpt-4-turbo",
        messages=[
            {"role": "system", "content": "–¢—ã –≥–ª–∞–≤–Ω—ã–π –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫. –°—É–º–º–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–∏–º–∏ —Ä–µ—à–µ–Ω–∏–µ."},
            {"role": "user", "content": summary_prompt}
        ]
    )

    return macro_result, quant_result, fundamental_result, final_response.choices[0].message.content

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit
st.set_page_config(page_title="AI Portfolio Manager", layout="wide")
st.title("ü§ñ –ú–Ω–æ–≥–æ—Å–ª–æ–π–Ω—ã–π AI-–∞–Ω–∞–ª–∏–∑ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π")

with st.form("input_form"):
    news = st.text_area("üì∞ –ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏", height=150)
    stock_data = st.text_area("üìà –î–∞–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞", height=150)
    company_name = st.text_input("üè¢ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏")
    submitted = st.form_submit_button("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å")

if submitted:
    with st.spinner("–ê–≥–µ–Ω—Ç—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç..."):
        macro, quant, fundamental, decision = asyncio.run(portfolio_manager(news, stock_data, company_name))

    st.subheader("üåç –ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑")
    st.write(macro)

    st.subheader("üìä –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑")
    st.write(quant)

    st.subheader("üìö –§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
    st.write(fundamental)

    st.subheader("üß† –§–∏–Ω–∞–ª—å–Ω–æ–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ")
    st.success(decision)

